'use client';

import React, { useState, useEffect } from 'react';
import { MsalProvider, useMsal, MsalAuthenticationTemplate } from '@azure/msal-react';
import { PublicClientApplication, InteractionType } from '@azure/msal-browser';
import { Home, PlusCircle, LogOut, User, LogIn, ChevronLeft, Camera, Save, Download, FileText, CheckCircle } from 'lucide-react';
import { 
  saveTestToFirestore, 
  getInProgressTests, 
  markTestAsCompleted,
  searchTests
} from '../lib/firestoreService';
import { 
  createLotFolder, 
  saveExcelToOneDrive, 
  uploadPhotoToOneDrive 
} from '../lib/graphService';
import { exportToExcel, generateExcelBlob } from '../lib/excelExport';
import { ResistanceTest, Sample } from '../lib/types';
import SearchBar from '../components/SearchBar';
import DailyReportModal from '../components/DailyReportModal';

const msalConfig = {
  auth: {
    clientId: process.env.NEXT_PUBLIC_MSAL_CLIENT_ID || '',
    authority: `https://login.microsoftonline.com/${process.env.NEXT_PUBLIC_MSAL_TENANT_ID}`,
    redirectUri: typeof window !== 'undefined' ? window.location.origin : '/',
  },
  cache: { cacheLocation: "sessionStorage" as const, storeAuthStateInCookie: false }
};

const loginRequest = { scopes: ["User.Read", "Files.ReadWrite"] };
const msalInstance = new PublicClientApplication(msalConfig);

// UI Components
const Card = ({ children, className = '' }: { children: React.ReactNode; className?: string }) => 
  <div className={`bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-800 rounded-lg shadow-md ${className}`}>{children}</div>;

const CardHeader = ({ children, className = '' }: { children: React.ReactNode; className?: string }) => 
  <div className={`p-6 ${className}`}>{children}</div>;

const CardTitle = ({ children, className = '' }: { children: React.ReactNode; className?: string }) => 
  <h2 className={`text-2xl font-bold text-gray-900 dark:text-white ${className}`}>{children}</h2>;

const CardDescription = ({ children, className = '' }: { children: React.ReactNode; className?: string }) => 
  <p className={`text-sm text-gray-500 dark:text-gray-400 ${className}`}>{children}</p>;

const CardContent = ({ children, className = '' }: { children: React.ReactNode; className?: string }) => 
  <div className={`p-6 pt-0 ${className}`}>{children}</div>;

interface ButtonProps { 
  children: React.ReactNode; 
  onClick?: () => void; 
  className?: string; 
  variant?: 'default' | 'ghost' | 'outline'; 
  type?: 'button' | 'submit' | 'reset'; 
  disabled?: boolean; 
}

const Button = ({ children, onClick, className = '', variant = 'default', type = 'button', disabled = false }: ButtonProps) => {
  const baseClasses = "inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors h-10 px-4 py-2";
  const variantClasses = {
    default: "bg-blue-600 text-white hover:bg-blue-700 disabled:opacity-50",
    ghost: "hover:bg-gray-100 dark:hover:bg-gray-800",
    outline: "border border-gray-300 dark:border-gray-700 bg-transparent hover:bg-gray-100 dark:hover:bg-gray-800"
  };
  return <button type={type} onClick={onClick} disabled={disabled} className={`${baseClasses} ${variantClasses[variant]} ${className}`}>{children}</button>;
};

const Progress = ({ value }: { value: number }) => (
  <div className="relative h-2 w-full overflow-hidden rounded-full bg-gray-200 dark:bg-gray-700">
    <div className="h-full bg-blue-600 transition-all" style={{ width: `${value || 0}%` }} />
  </div>
);

const Input = (props: React.InputHTMLAttributes<HTMLInputElement>) => 
  <input {...props} className="flex h-10 w-full rounded-md border border-gray-300 bg-transparent px-3 py-2 text-sm focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 dark:border-gray-700" />;

const Label = (props: React.LabelHTMLAttributes<HTMLLabelElement>) => 
  <label {...props} className="text-sm font-medium leading-none" />;

const Select = ({ children, ...props }: React.SelectHTMLAttributes<HTMLSelectElement> & { children: React.ReactNode }) => 
  <select {...props} className="flex h-10 w-full rounded-md border border-gray-300 bg-transparent px-3 py-2 text-sm focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 dark:border-gray-700">{children}</select>;

const Textarea = (props: React.TextareaHTMLAttributes<HTMLTextAreaElement>) => 
  <textarea {...props} className="flex min-h-[80px] w-full rounded-md border border-gray-300 bg-transparent px-3 py-2 text-sm focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 dark:border-gray-700" />;

// Lista de pruebas
const ResistanceTestList = ({ 
  setRoute, 
  tests, 
  isLoading, 
  onRefresh,
  onSearch 
}: { 
  setRoute: (route: string, params?: any) => void; 
  tests: ResistanceTest[]; 
  isLoading: boolean; 
  onRefresh: () => void;
  onSearch: (term: string) => void;
}) => {
  const [showDailyReport, setShowDailyReport] = useState(false);

  const calculateProgress = (test: ResistanceTest) => {
    if (!test.samples) return 0;
    const completedSamples = test.samples.filter(s => s.rawUnits > 0 || s.cookedUnits > 0).length;
    return (test.samples.length > 0) ? (completedSamples / test.samples.length) * 100 : 0;
  };

  return (
    <>
      <Card>
        <CardHeader>
          <div className="flex flex-col gap-4">
            <div className="flex justify-between items-center">
              <div>
                <CardTitle>Pruebas en Progreso</CardTitle>
                <CardDescription>Ensayos activos almacenados en Firestore</CardDescription>
              </div>
              <div className="flex items-center gap-2">
                <Button variant="outline" className="gap-2" onClick={() => setShowDailyReport(true)}>
                  <FileText size={18}/> Reporte Diario
                </Button>
                <Button className="gap-2" onClick={() => setRoute('new-test')}>
                  <PlusCircle size={18}/> Nueva Prueba
                </Button>
              </div>
            </div>
            <SearchBar onSearch={onSearch} />
          </div>
        </CardHeader>
        <CardContent>
          {isLoading ? (
            <div className="text-center py-8">
              <p className="text-gray-500">Cargando ensayos...</p>
            </div>
          ) : (
            <div className="space-y-4">
              {tests.length === 0 ? (
                <div className="text-center py-8">
                  <p className="text-gray-500">No se encontraron ensayos en progreso.</p>
                </div>
              ) : tests.map(test => (
                <div 
                  key={test.id} 
                  onClick={() => setRoute('test-detail', { id: test.id })} 
                  className="border dark:border-gray-800 rounded-lg p-4 hover:bg-gray-50 dark:hover:bg-gray-900 transition-colors cursor-pointer"
                >
                  <div className="flex justify-between items-center">
                    <div className="flex items-center gap-2">
                      <div className="font-medium">Lote: {test.lotNumber}</div>
                      {test.isCompleted && (
                        <span className="flex items-center gap-1 text-xs text-green-600 bg-green-100 px-2 py-1 rounded">
                          <CheckCircle size={12} /> Completado
                        </span>
                      )}
                    </div>
                    <div className="text-sm text-gray-500">
                      {new Date(test.date).toLocaleDateString('es-EC')}
                    </div>
                  </div>
                  <div className="text-sm text-gray-600 dark:text-gray-400 mt-1">
                    Proveedor: {test.provider} | Piscina: {test.pool}
                  </div>
                  <div className="mt-3">
                    <div className="flex justify-between items-center mb-1">
                      <span className="text-xs font-medium text-gray-600 dark:text-gray-400">Progreso</span>
                      <span className="text-xs font-bold">{Math.round(calculateProgress(test))}%</span>
                    </div>
                    <Progress value={calculateProgress(test)} />
                  </div>
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>
      <DailyReportModal isOpen={showDailyReport} onClose={() => setShowDailyReport(false)} />
    </>
  );
};

// Crear nueva prueba
const NewTestPage = ({ setRoute, onTestCreated }: { setRoute: (route: string) => void; onTestCreated: () => void }) => {
  const { instance } = useMsal();
  const [isSaving, setIsSaving] = useState(false);

  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    setIsSaving(true);

    const formData = new FormData(event.currentTarget);
    const formDataObj = Object.fromEntries(formData.entries());

    const newTest: ResistanceTest = {
      id: `rt-${Date.now()}`,
      date: formDataObj.date as string,
      startTime: formDataObj.startTime as string,
      lotNumber: formDataObj.lotNumber as string,
      provider: formDataObj.provider as string,
      pool: formDataObj.pool as string,
      certificationType: formDataObj.certificationType as 'ASC' | 'CONVENCIONAL',
      so2Residuals: Number(formDataObj.so2Residuals),
      so2Bf: Number(formDataObj.so2Bf),
      createdBy: instance.getActiveAccount()?.name || "Usuario Desconocido",
      observations: '',
      samples: Array.from({ length: 7 }, (_, i) => ({
        id: `s-${Date.now()}-${i}`,
        timeSlot: i * 2,
        rawUnits: 0,
        cookedUnits: 0,
      })),
      isCompleted: false,
    };

    try {
      console.log('üîÑ Iniciando creaci√≥n de prueba:', newTest.lotNumber);
      
      // Crear carpeta en OneDrive
      console.log('üìÅ Creando carpeta en OneDrive...');
      try {
        await createLotFolder(instance, loginRequest.scopes, newTest.lotNumber);
        console.log('‚úÖ Carpeta lista en OneDrive');
      } catch (oneDriveError: any) {
        console.error('‚ö†Ô∏è Error en OneDrive (continuando):', oneDriveError);
        // Continuar incluso si falla OneDrive
      }
      
      // Guardar en Firestore
      console.log('üíæ Guardando en Firestore...');
      await saveTestToFirestore(newTest);
      console.log('‚úÖ Guardado en Firestore exitoso');
      
      alert(`‚úÖ Ensayo ${newTest.lotNumber} creado exitosamente.`);
      onTestCreated();
      setRoute('dashboard');
    } catch (error: any) {
      console.error('‚ùå Error completo:', error);
      console.error('‚ùå Stack:', error.stack);
      alert(`‚ùå Error al crear ensayo: ${error.message}\n\nRevisa la consola para m√°s detalles.`);
    } finally {
      setIsSaving(false);
    }
  };

  return (
    return (
    };

  return (
    <Card className="max-w-4xl mx-auto">
      <CardHeader>
        <CardTitle className="text-black">Crear Nueva Resistencia</CardTitle>
```
        <CardDescription className="text-gray-700">Los datos se guardar√°n en Firestore y OneDrive</CardDescription>
      </CardHeader>
      <CardContent>
        <form onSubmit={handleSubmit} className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div className="space-y-2">
            <Label htmlFor="lotNumber" className="text-black">N√∫mero de Lote *</Label>
            <Input name="lotNumber" id="lotNumber" placeholder="Ej: 0003540-25" required />
          </div>
          <div className="space-y-2">
            <Label htmlFor="provider" className="text-black">Proveedor *</Label>
            <Input name="provider" id="provider" placeholder="Ej: AquaPro" required />
          </div>
          <div className="space-y-2">
            <Label htmlFor="pool" className="text-black">Piscina *</Label>
            <Input name="pool" id="pool" placeholder="Ej: P-05" required />
          </div>
          <div className="space-y-2">
            <Label htmlFor="responsable" className="text-black">Responsable *</Label>
            <Input name="responsable" id="responsable" placeholder="Ej: Juan P√©rez" required />
          </div>
          <div className="space-y-2">
            <Label htmlFor="date" className="text-black">Fecha *</Label>
            <Input name="date" id="date" type="date" required />
          </div>
          <div className="space-y-2">
            <Label htmlFor="startTime" className="text-black">Hora de Inicio *</Label>
            <Input name="startTime" id="startTime" type="time" required />
          </div>
          <div className="space-y-2">
            <Label htmlFor="certificationType" className="text-black">Certificaci√≥n *</Label>
            <Select name="certificationType" id="certificationType" required>
              <option value="ASC">ASC</option>
              <option value="CONVENCIONAL">CONVENCIONAL</option>
            </Select>
          </div>
          <div className="space-y-2">
            <Label htmlFor="so2Residuals" className="text-black">Residual SO2 MW (opcional)</Label>
            <Input name="so2Residuals" id="so2Residuals" type="number" step="0.1" placeholder="Ej: 15.5" />
          </div>
          <div className="space-y-2">
            <Label htmlFor="so2Bf" className="text-black">Residual SO2 BF (opcional)</Label>
            <Input name="so2Bf" id="so2Bf" type="number" step="0.1" placeholder="Ej: 12.3" />
          </div>
          <div className="md:col-span-2 flex justify-end gap-4">
            <Button type="button" variant="outline" onClick={() => setRoute('dashboard')} disabled={isSaving}>
```
              Cancelar
            </Button>
            <Button type="submit" disabled={isSaving}>
              {isSaving ? "Creando..." : "Crear Ensayo"}
            </Button>
          </div>
        </form>
      </CardContent>
    </Card>
  );
};

// Detalle de prueba
const TestDetailPage = ({ test, setRoute, onTestUpdated }: { test: ResistanceTest; setRoute: (route: string) => void; onTestUpdated: () => void }) => {
  const { instance } = useMsal();
  const [editedTest, setEditedTest] = useState<ResistanceTest>(test);
  const [isSaving, setIsSaving] = useState(false);
  const [isCompleting, setIsCompleting] = useState(false);

  const formatTimeSlot = (baseTime: string, hoursToAdd: number) => {
    try {
      const [hours, minutes] = baseTime.split(':').map(Number);
      const date = new Date();
      date.setHours(hours + hoursToAdd, minutes, 0, 0);
      return date.toLocaleTimeString('es-EC', { hour: '2-digit', minute: '2-digit', hour12: false });
    } catch {
      return `+${hoursToAdd}h`;
    }
  };

  const handleSampleChange = (sampleId: string, field: 'rawUnits' | 'cookedUnits', value: number) => {
    setEditedTest(prev => ({
      ...prev,
      samples: prev.samples.map(s => s.id === sampleId ? { ...s, [field]: value } : s)
    }));
  };

  const handleObservationsChange = (value: string) => {
    setEditedTest(prev => ({ ...prev, observations: value }));
  };

  const handlePhotoUpload = async (sampleId: string, file: File) => {
    try {
      // Subir SOLO a OneDrive (no a Firebase Storage)
      const photoUrl = await uploadPhotoToOneDrive(instance, loginRequest.scopes, editedTest.lotNumber, sampleId, file);
      
      // Actualizar el test con la URL de OneDrive
      setEditedTest(prev => ({
        ...prev,
        samples: prev.samples.map(s => s.id === sampleId ? { ...s, photoUrl } : s)
      }));
      
      alert('‚úÖ Foto subida exitosamente');
    } catch (error: any) {
      alert(`‚ùå Error al subir foto: ${error.message}`);
    }
  };

  const handleSave = async () => {
    setIsSaving(true);
    try {
      await saveTestToFirestore(editedTest);
      alert('‚úÖ Cambios guardados');
      onTestUpdated();
    } catch (error: any) {
      alert(`‚ùå Error: ${error.message}`);
    } finally {
      setIsSaving(false);
    }
  };

  const handleComplete = async () => {
    if (!confirm('¬øEst√° seguro de marcar esta prueba como completada? Se generar√° y guardar√° el reporte Excel autom√°ticamente.')) {
      return;
    }

    setIsCompleting(true);
    try {
      // Marcar como completada en Firestore
      await markTestAsCompleted(editedTest.id);
      
      // Generar Excel
      const excelBlob = generateExcelBlob(editedTest);
      
      // Guardar Excel en OneDrive
      await saveExcelToOneDrive(instance, loginRequest.scopes, editedTest.lotNumber, excelBlob);
      
      // Actualizar estado local
      setEditedTest(prev => ({ ...prev, isCompleted: true }));
      
      alert('‚úÖ Prueba completada y reporte guardado en OneDrive');
      onTestUpdated();
    } catch (error: any) {
      alert(`‚ùå Error: ${error.message}`);
    } finally {
      setIsCompleting(false);
    }
  };

  const handleExportReport = () => {
    try {
      exportToExcel(editedTest);
    } catch (error: any) {
      alert(`‚ùå Error al exportar: ${error.message}`);
    }
  };

  return (
    <Card>
      <CardHeader>
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-4">
            <Button variant="ghost" className="p-2 h-auto" onClick={() => setRoute('dashboard')}>
              <ChevronLeft className="h-5 w-5"/>
            </Button>
            <div>
              <div className="flex items-center gap-2">
                <CardTitle>Lote {test.lotNumber}</CardTitle>
                {editedTest.isCompleted && (
                  <span className="flex items-center gap-1 text-sm text-green-600 bg-green-100 px-3 py-1 rounded">
                    <CheckCircle size={14} /> Completado
                  </span>
                )}
              </div>
              <CardDescription>
                {test.provider} - Piscina {test.pool} - {new Date(test.date).toLocaleDateString('es-EC')}
              </CardDescription>
            </div>
          </div>
          <div className="flex gap-2">
            <Button variant="outline" className="gap-2" onClick={handleExportReport}>
              <Download size={18}/> Descargar Excel
            </Button>
            {!editedTest.isCompleted && (
              <>
                <Button variant="outline" className="gap-2" onClick={handleSave} disabled={isSaving}>
                  <Save size={18}/> {isSaving ? 'Guardando...' : 'Guardar'}
                </Button>
                <Button className="gap-2 bg-green-600 hover:bg-green-700" onClick={handleComplete} disabled={isCompleting}>
                  <CheckCircle size={18}/> {isCompleting ? 'Completando...' : 'Completar'}
                </Button>
              </>
            )}
          </div>
        </div>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-6">
          {editedTest.samples.map(sample => (
            <Card key={sample.id} className="w-full">
              <CardHeader>
                <CardTitle className="text-lg">Hora: {formatTimeSlot(test.startTime, sample.timeSlot)}</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor={`raw-${sample.id}`}>Unidades Crudo</Label>
                  <Input 
                    id={`raw-${sample.id}`} 
                    type="number" 
                    value={sample.rawUnits}
                    onChange={(e) => handleSampleChange(sample.id, 'rawUnits', Number(e.target.value))}
                    min="0"
                    max="20"
                    disabled={editedTest.isCompleted}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`cooked-${sample.id}`}>Unidades Cocido</Label>
                  <Input 
                    id={`cooked-${sample.id}`} 
                    type="number" 
                    value={sample.cookedUnits}
                    onChange={(e) => handleSampleChange(sample.id, 'cookedUnits', Number(e.target.value))}
                    min="0"
                    max="20"
                    disabled={editedTest.isCompleted}
                  />
                </div>
                <div>
                  <input
                    type="file"
                    accept="image/*"
                    capture="environment"
                    id={`photo-${sample.id}`}
                    className="hidden"
                    onChange={(e) => {
                      const file = e.target.files?.[0];
                      if (file) handlePhotoUpload(sample.id, file);
                    }}
                    disabled={editedTest.isCompleted}
                  />
                  <Button 
                    variant="outline" 
                    className="w-full gap-2"
                    onClick={() => document.getElementById(`photo-${sample.id}`)?.click()}
                    disabled={editedTest.isCompleted}
                  >
                    <Camera size={16} />
                    {sample.photoUrl ? "Ver/Cambiar Foto" : "Tomar Foto"}
                  </Button>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>

        <div className="space-y-2">
          <Label htmlFor="observations">Observaciones</Label>
          <Textarea 
            id="observations"
            value={editedTest.observations || ''}
            onChange={(e) => handleObservationsChange(e.target.value)}
            placeholder="Ingrese observaciones relevantes..."
            rows={4}
            disabled={editedTest.isCompleted}
          />
        </div>
      </CardContent>
    </Card>
  );
};

// Dashboard principal
const DashboardPage = () => {
  const { instance, accounts } = useMsal();
  const [route, setRoute] = useState('dashboard');
  const [routeParams, setRouteParams] = useState<any>(null);
  const [tests, setTests] = useState<ResistanceTest[]>([]);
  const [allTests, setAllTests] = useState<ResistanceTest[]>([]);
  const [isLoading, setIsLoading] = useState(true);

  const loadTests = async () => {
    setIsLoading(true);
    try {
      const testsFromFirestore = await getInProgressTests();
      setTests(testsFromFirestore);
      setAllTests(testsFromFirestore);
    } catch (error: any) {
      alert(`‚ùå Error: ${error.message}`);
    } finally {
      setIsLoading(false);
    }
  };

  const handleSearch = async (searchTerm: string) => {
    if (!searchTerm.trim()) {
      setTests(allTests);
      return;
    }
    
    try {
      const results = await searchTests(searchTerm);
      setTests(results);
    } catch (error: any) {
      alert(`‚ùå Error en b√∫squeda: ${error.message}`);
    }
  };

  useEffect(() => {
    loadTests();
  }, []);

  const handleSetRoute = (newRoute: string, params: any = null) => {
    setRoute(newRoute);
    setRouteParams(params);
  };

  const renderContent = () => {
    switch (route) {
      case 'new-test':
        return <NewTestPage setRoute={handleSetRoute} onTestCreated={loadTests} />;
      case 'test-detail':
        const test = tests.find(t => t.id === routeParams.id);
        if (test) return <TestDetailPage test={test} setRoute={handleSetRoute} onTestUpdated={loadTests} />;
        return <p>Test no encontrado</p>;
      default:
        return <ResistanceTestList setRoute={handleSetRoute} tests={tests} isLoading={isLoading} onRefresh={loadTests} onSearch={handleSearch} />;
    }
  };

  return (
    <div className="min-h-screen w-full flex bg-gray-50 dark:bg-gray-950">
      <aside className="w-64 flex-col border-r dark:border-gray-800 bg-white dark:bg-gray-900 hidden md:flex">
        <div className="p-4 border-b dark:border-gray-800">
          <div className="flex items-center gap-2">
            <div className="w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center text-white font-bold">A</div>
            <span className="font-bold text-lg">Aquagold</span>
          </div>
        </div>
        <nav className="flex-1 p-4 space-y-2">
          <a 
            href="#" 
            onClick={() => handleSetRoute('dashboard')} 
            className={`flex items-center gap-3 rounded-lg px-3 py-2 ${route === 'dashboard' ? 'bg-blue-100 dark:bg-blue-900/50 text-blue-600' : 'text-gray-600 dark:text-gray-400 hover:bg-gray-100'}`}
          >
            <Home className="h-4 w-4" /> Dashboard
          </a>
          <a 
            href="#" 
            onClick={() => handleSetRoute('new-test')} 
            className={`flex items-center gap-3 rounded-lg px-3 py-2 ${route === 'new-test' ? 'bg-blue-100 dark:bg-blue-900/50 text-blue-600' : 'text-gray-600 dark:text-gray-400 hover:bg-gray-100'}`}
          >
            <PlusCircle className="h-4 w-4" /> Nueva Prueba
          </a>
        </nav>
        <div className="p-4 mt-auto border-t dark:border-gray-800">
          <Button onClick={() => instance.logoutRedirect()} variant="outline" className="w-full gap-2">
            <LogOut className="h-4 w-4" /> Cerrar Sesi√≥n
          </Button>
        </div>
      </aside>

      <div className="flex flex-col flex-1">
        <header className="flex h-14 items-center gap-4 border-b dark:border-gray-800 bg-white dark:bg-gray-900 px-6">
          <div className="flex-1">
            <h1 className="font-semibold text-lg capitalize">{route.replace('-', ' ')}</h1>
          </div>
          <div className="flex items-center gap-2">
            <User className="h-5 w-5" />
            <span className="text-sm font-medium">{accounts[0]?.name || "Usuario"}</span>
          </div>
        </header>
        <main className="flex-1 p-4 md:p-6 lg:p-8">
          {renderContent()}
        </main>
      </div>
    </div>
  );
};

// P√°gina de error
const ErrorLoginPage = () => {
  const { instance } = useMsal();
  return (
    <main className="flex min-h-screen items-center justify-center bg-gray-50 dark:bg-gray-950 p-4">
      <Card className="max-w-sm w-full">
        <CardHeader className="space-y-4">
          <CardTitle>Iniciar Sesi√≥n</CardTitle>
          <CardDescription>Por favor, inicie sesi√≥n con Microsoft para continuar</CardDescription>
        </CardHeader>
        <CardContent>
          <Button onClick={() => instance.loginRedirect(loginRequest)} className="w-full gap-2">
            <LogIn className="h-5 w-5" />
            Iniciar con Microsoft
          </Button>
        </CardContent>
      </Card>
    </main>
  );
};

// Componente de carga consistente para evitar errores de hidrataci√≥n
const LoadingScreen = () => (
  <div className="flex items-center justify-center min-h-screen">
    <div className="text-center">
      <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
      <p className="text-gray-600">Cargando...</p>
    </div>
  </div>
);

// App principal
const App = () => {
  if (typeof window === 'undefined') {
    return <LoadingScreen />;
  }

  return (
    <MsalProvider instance={msalInstance}>
      <MsalAuthenticationTemplate
        interactionType={InteractionType.Redirect}
        authenticationRequest={loginRequest}
        errorComponent={ErrorLoginPage}
        loadingComponent={LoadingScreen}
      >
        <DashboardPage />
      </MsalAuthenticationTemplate>
    </MsalProvider>
  );
};

export default App;